/*******************************************************************
    Using a 64 * 32 RGB Matrix to displays the Instructables
    Mascot!
 *                                                                 *
    Written by Brian Lough
    https://www.youtube.com/channel/UCezJOfu7OtqGzd5xrP3q6WA
 *******************************************************************/

// ----------------------------
// Standard Libraries - Already Installed if you have ESP8266 set up
// ----------------------------
#include <Ticker.h>
#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <stdio.h>
#include <stdlib.h>



// ----------------------------
// Additional Libraries - each one of these will need to be installed.
// ----------------------------


#include <PxMatrix.h>
// The library for controlling the LED Matrix
// Needs to be manually downloaded and installed
// https://github.com/2dom/PxMatrix

char ssid[] = "The LAN Before Time";       // your network SSID (name)
char password[] = "Littlefootpowersyourcar";  // your network key


Ticker display_ticker;

WiFiClientSecure client;

// Pins for LED MATRIX
#define P_LAT 16
#define P_A 5
#define P_B 4
#define P_C 15
#define P_OE 2
#define P_D 12
#define P_E 0

// PxMATRIX display(32,16,P_LAT, P_OE,P_A,P_B,P_C);
// PxMATRIX display(64,32,P_LAT, P_OE,P_A,P_B,P_C,P_D);
PxMATRIX display(64, 32, P_LAT, P_OE, P_A, P_B, P_C, P_D, P_E);

// Some standard colors
uint16_t myRED = display.color565(255, 0, 0);
uint16_t myGREEN = display.color565(0, 255, 0);
uint16_t myBLUE = display.color565(0, 0, 255);
uint16_t myWHITE = display.color565(255, 255, 255);
uint16_t myYELLOW = display.color565(255, 255, 0);
uint16_t myCYAN = display.color565(0, 255, 255);
uint16_t myMAGENTA = display.color565(255, 0, 255);
uint16_t myBLACK = display.color565(0, 0, 0);

uint16 myCOLORS[8] = {myRED, myGREEN, myBLUE, myWHITE, myYELLOW, myCYAN, myMAGENTA, myBLACK};

// Converted using the following site: http://www.rinkydinkelectronics.com/t_imageconverter565.php
uint16_t static image[] = {
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0010 (16) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0020 (32) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0030 (48) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0040 (64) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0050 (80) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0060 (96) pixels
0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0070 (112) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0080 (128) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x942A, 0x8BC9, 0x8BC9, 0x8BC9, 0x8BC9, 0x8BC9,   // 0x0090 (144) pixels
0x8BC9, 0x8BC9, 0x8BC9, 0x8BC9, 0x0000, 0x0000, 0x8BC9, 0x8BC9, 0x8BC9, 0x8BC9, 0x8BC9, 0x8BC9, 0x8BC9, 0x8BC9, 0x8BC9, 0x8BC9,   // 0x00A0 (160) pixels
0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00B0 (176) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00C0 (192) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xBD4D, 0xB4CB, 0xFFFF, 0xFFFF,   // 0x00D0 (208) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xBD4D, 0x0000, 0x0000, 0x0000, 0x0000, 0xB50D, 0xF7BD, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xB50C, 0x0000,   // 0x00E0 (224) pixels
0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00F0 (240) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0100 (256) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x8BC9, 0xFFFF, 0xB50C, 0xB50D,   // 0x0110 (272) pixels
0xB50D, 0xB50D, 0xB50D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xB50D, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x0000,   // 0x0120 (288) pixels
0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0130 (304) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0140 (320) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xB50D, 0xFFFF, 0xB50D, 0xB50D,   // 0x0150 (336) pixels
0xB50D, 0xB50D, 0xB50D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xB4EB, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x9C6B, 0x0000,   // 0x0160 (352) pixels
0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0170 (368) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0180 (384) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xB4EB, 0xFFFF, 0xB50D, 0xB50D,   // 0x0190 (400) pixels
0xB50D, 0xB50D, 0x942A, 0x0000, 0x0000, 0x0000, 0x0000, 0xA4AB, 0xFFFF, 0xB4CB, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x0000, 0x0000,   // 0x01A0 (416) pixels
0x3186, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x01B0 (432) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x01C0 (448) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xBD4D, 0xFFFF, 0xB4EC, 0xB50D, 0xB50D,   // 0x01D0 (464) pixels
0xB50D, 0xB50D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xB50D, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xBD2D, 0x0000, 0x0000,   // 0x01E0 (480) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xEF5D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x01F0 (496) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0200 (512) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xB50D, 0xFFFF, 0xB50D, 0xB50D, 0xB50D,   // 0x0210 (528) pixels
0xB50D, 0xBD2D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBD2D, 0xF7BD, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x5A86, 0x0000, 0x0000,   // 0x0220 (544) pixels
0x6B07, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x18E2, 0x0000, 0x0000, 0x0000, 0xDEDB, 0xFFFF, 0xFFFF,   // 0x0230 (560) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0240 (576) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xACCC, 0xBD2D, 0xF7BD, 0xB50D, 0xB50D, 0xB50D,   // 0x0250 (592) pixels
0xB50D, 0x5246, 0x0000, 0x0000, 0x0000, 0x0000, 0xBD4D, 0xFFFF, 0xB4EC, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x6B07, 0xB50D, 0xDE96,   // 0x0260 (608) pixels
0xFFFF, 0xFFFF, 0xEF3B, 0xEF3B, 0xEF3B, 0xEF3B, 0xEF3B, 0xEF3B, 0xEF3B, 0xF77C, 0xB50D, 0xB50C, 0x0000, 0x0000, 0x0000, 0xCE59,   // 0x0270 (624) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0280 (640) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xB50D, 0xFFFF, 0xB50C, 0xB50D, 0xB50D, 0xB50D,   // 0x0290 (656) pixels
0xB50D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xB50D, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB4EB, 0xFFFF, 0xFFFF, 0xB50C,   // 0x02A0 (672) pixels
0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xA4AB, 0x0000, 0x0000,   // 0x02B0 (688) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x02C0 (704) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xB596, 0x0000, 0x0000, 0xBD6F, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D,   // 0x02D0 (720) pixels
0xBD4D, 0x0000, 0x0000, 0x0000, 0x0000, 0x41C4, 0xDE96, 0xD675, 0xB50D, 0xB50D, 0xB50D, 0xFFFF, 0xBD2D, 0xB50D, 0xB50D, 0xBD2D,   // 0x02E0 (736) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBD2D, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x0000, 0x0000, 0xEF5D,   // 0x02F0 (752) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0300 (768) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xBD4D, 0xFFFF, 0xD634, 0xB50D, 0xB50D, 0xB50D, 0xB50D,   // 0x0310 (784) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBD2D, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D,   // 0x0320 (800) pixels
0xB50D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xB50C, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xBD2D, 0x0000, 0x0000, 0xFFFF,   // 0x0330 (816) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0340 (832) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xB50D, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D,   // 0x0350 (848) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xB50C, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB4EB, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D,   // 0x0360 (864) pixels
0xBD2D, 0x0000, 0x0000, 0x0000, 0x0000, 0x8BC9, 0xBD2D, 0xBD2D, 0xBD2D, 0xBD2D, 0xBD2D, 0xBD2D, 0x5A86, 0x0000, 0x0000, 0xFFFF,   // 0x0370 (880) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0380 (896) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x4A49, 0x0000, 0x39A4, 0xB50D, 0xCE13, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50C,   // 0x0390 (912) pixels
0xB4EB, 0xB4EB, 0xB4EB, 0xB4EB, 0xB4EB, 0xFFFF, 0xB4EC, 0xB50D, 0xB50D, 0xB50D, 0xFFFF, 0xB4EB, 0xB50D, 0xB50D, 0xB50D, 0xB50D,   // 0x03A0 (928) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x03B0 (944) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xA534, 0xFFFF, 0xFFFF,   // 0x03C0 (960) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x62C7, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50C,   // 0x03D0 (976) pixels
0xB50C, 0xB50C, 0xB50C, 0xB50C, 0xB50C, 0xB50C, 0xB50D, 0xB50D, 0xB50C, 0xB50D, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xBD2D,   // 0x03E0 (992) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D,   // 0x03F0 (1008) pixels
0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0400 (1024) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xB50D, 0xB50D, 0xB50D,   // 0x0410 (1040) pixels
0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x0000, 0x0000, 0x0000, 0xBD6F, 0xF77C, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x18A1,   // 0x0420 (1056) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xACCC, 0xD634, 0xDEB8, 0xBD2D, 0xBD2D, 0xBD2D, 0xBD2D, 0xBD2D,   // 0x0430 (1072) pixels
0xBD2D, 0xBD2D, 0xBD2D, 0xBD2D, 0xBD2D, 0xBD2D, 0xBD2D, 0xBD2D, 0xBD2D, 0xBD2D, 0x9C6B, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0440 (1088) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0450 (1104) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBD4D, 0xFFFF, 0xB50C, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x0000,   // 0x0460 (1120) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0xB50D, 0xFFFF, 0xFFFF, 0xFFFF, 0xB50D, 0xFFFF, 0xB50C, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D,   // 0x0470 (1136) pixels
0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x0000, 0x0000, 0xCE79, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0480 (1152) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0490 (1168) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xB50C, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xBD4D, 0x0000,   // 0x04A0 (1184) pixels
0x0000, 0x0000, 0x0000, 0x18A1, 0xD634, 0xDEB8, 0xB50D, 0xB50D, 0xB50C, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xBD4D, 0x0000, 0x0000,   // 0x04B0 (1200) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x04C0 (1216) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x04D0 (1232) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x5A86, 0xEF1A, 0xCE13, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x0000, 0x0000,   // 0x04E0 (1248) pixels
0x0000, 0x0000, 0x0000, 0xBD2D, 0xFFFF, 0xB50C, 0xB50D, 0xB50D, 0xF7BD, 0xBD2D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x8BC9, 0x0000,   // 0x04F0 (1264) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0500 (1280) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0510 (1296) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xACCC, 0xB50C, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xCE13, 0xCE13,   // 0x0520 (1312) pixels
0xCE13, 0xCE13, 0xCE13, 0xCE13, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x0000, 0x0000,   // 0x0530 (1328) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xEF5D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0540 (1344) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0550 (1360) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x2102, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D,   // 0x0560 (1376) pixels
0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x2943, 0xB4CB, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50C, 0xFFFF, 0xFFFF,   // 0x0570 (1392) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF77C, 0xBD2D, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0580 (1408) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0590 (1424) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x5246, 0x6B07, 0x6B07, 0x6B07, 0x6B07,   // 0x05A0 (1440) pixels
0x6B07, 0x6B07, 0x6B07, 0x6B07, 0x0000, 0x0000, 0xBD2D, 0xFFFF, 0xB4EB, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D,   // 0x05B0 (1456) pixels
0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x2102, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x05C0 (1472) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x05D0 (1488) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x05E0 (1504) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xB50D, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x0000, 0x0000, 0x0000,   // 0x05F0 (1520) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0600 (1536) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0610 (1552) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0620 (1568) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0x630C, 0x0000, 0x0000, 0xB50C, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xBD4D, 0x0000, 0x0000, 0x0000,   // 0x0630 (1584) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0640 (1600) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0650 (1616) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0660 (1632) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xBD4D, 0xFFFF, 0xB50C, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x0000, 0x0000, 0x630C, 0xDEDB,   // 0x0670 (1648) pixels
0x738E, 0xEF5D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0680 (1664) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0690 (1680) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x06A0 (1696) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xB50D, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x0000, 0x0000, 0xFFFF, 0xFFFF,   // 0x06B0 (1712) pixels
0xA534, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x06C0 (1728) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x06D0 (1744) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x06E0 (1760) pixels
0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x2943, 0xD675, 0xDE96, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xBD2D, 0x0000, 0x0000, 0xFFFF, 0xFFFF,   // 0x06F0 (1776) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0700 (1792) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0710 (1808) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0720 (1824) pixels
0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xB50D, 0xFFFF, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0xB50D, 0x0000, 0x0000, 0xCE79, 0xFFFF, 0xFFFF,   // 0x0730 (1840) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0740 (1856) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0750 (1872) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0760 (1888) pixels
0xFFFF, 0xE73C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0770 (1904) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0780 (1920) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0790 (1936) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x07A0 (1952) pixels
0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x07B0 (1968) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x07C0 (1984) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x07D0 (2000) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x07E0 (2016) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x07F0 (2032) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0800 (2048) pixels
};




// ISR for display refresh
void display_updater()
{

  display.display(70);

}
void display_update_enable(bool is_enable)
{

#ifdef ESP8266
  if (is_enable)
    display_ticker.attach(0.002, display_updater);
  else
    display_ticker.detach();
#endif

#ifdef ESP32
  if (is_enable)
  {
    timer = timerBegin(0, 80, true);
    timerAttachInterrupt(timer, &display_updater, true);
    timerAlarmWrite(timer, 2000, true);
    timerAlarmEnable(timer);
  }
  else
  {
    timerDetachInterrupt(timer);
    timerAlarmDisable(timer);
  }
#endif
}

void pixel_time_test(uint8_t draw_time)
{
  int num;
   
  Serial.print("Pixel draw latency in us: ");
  unsigned long start_timer=micros();
  display.drawPixel(1,1,0);
  unsigned long delta_timer=micros()-start_timer;
  Serial.println(delta_timer);

  Serial.print("Display update latency in us: ");
  start_timer=micros();
  display.display(draw_time);
  delta_timer=micros()-start_timer;
  Serial.println(delta_timer);


  display.setBrightness(0);
  display.clearDisplay();

  display.setTextSize(1);


/////////////////////////////////
//////// SCROLLING TEXT /////////
/////////////////////////////////

  String whee = "WHEEE";
  while(1){
    for(int i = 0; i < 63; i++){
      whee = "WHEEE";
      yield();
      if(i >= 35 && i <= 41){
        whee = "WHEEE";
      }
      if(i >= 41 && i < 47){
        whee = "WHEE";
      }
      if(i >= 53 && i < 59){
        whee = "WHE";
      }
      if(i >= 65 && i < 71){
        whee = "WH";
      }
      if(i >= 71){
        whee = "W";
      }
      
      display.setTextColor(myRED);
      display.setCursor(i,0);
      display.print(whee);
      yield();
      display.setTextColor(myGREEN);  
      display.setCursor((i + 8) % 64,8);
      display.print(whee);
      yield();
      display.setTextColor(myBLUE);  
      display.setCursor((i + 16) % 64,16);
      display.print(whee);
      yield();
      display.setTextColor(myMAGENTA);  
      display.setCursor((i + 24) % 64,24);
      display.print(whee);
      yield();
      delay(10);
      display.clearDisplay();   
    }
  }

  yield();
  delay(5000);


 

  display_update_enable(false);
}

void pixel_time_test2(uint8_t draw_time)
{
  display.clearDisplay();
  Serial.print("Pixel draw latency in us: ");
  unsigned long start_timer=micros();
  display.drawPixel(1,1,0);
  unsigned long delta_timer=micros()-start_timer;
  Serial.println(delta_timer);

  Serial.print("Display update latency in us: ");
  start_timer=micros();
  display.display(draw_time);
  delta_timer=micros()-start_timer;
  Serial.println(delta_timer);


  display.setBrightness(255);
  display.setTextColor(myCYAN);
  display.setTextSize(1);
  display.setCursor(2,0);
  display.print("Hooray PxMatrix!");
  display_update_enable(true);

  yield();
  delay(2000);
}
void setup() {
//  
//  display.begin(16);
//  display.clearDisplay();
//  display.setTextColor(myCYAN);
//  display.setTextSize(1);
//  display.setCursor(2, 0);
//  display.print("Connecting");
//  display.setTextColor(myMAGENTA);
//  display.setCursor(2, 8);
//  display.print("to the");
//  display.setTextColor(myGREEN);
//  display.setCursor(2, 16);
//  display.print("WiFi!");
//  WiFi.mode(WIFI_STA);
//  WiFi.disconnect();
//  Serial.print("Connecting Wifi: ");
//  Serial.println(ssid);
//  WiFi.begin(ssid, password);
//  while (WiFi.status() != WL_CONNECTED) {
//    Serial.print(".");
//    delay(500);
//  }
//  Serial.println("");
//  Serial.println("WiFi connected");
//  Serial.println("IP address: ");
//  IPAddress ip = WiFi.localIP();
//  Serial.println(ip);

  
  
  display.begin(16);
  display.clearDisplay();
  Serial.print("Pixel draw latency in us: ");
  unsigned long start_timer = micros();
  display.drawPixel(1, 1, 0);
  unsigned long delta_timer = micros() - start_timer;
  Serial.println(delta_timer);

  Serial.print("Display update latency in us: ");
  start_timer = micros();
  display.display(0);
  delta_timer = micros() - start_timer;
  Serial.println(delta_timer);

  display_ticker.attach(0.002, display_updater);
  yield();
  display.clearDisplay();
  //drawImage(0, 0);
  delay(500);
//
//  pixel_time_test(100);
    loop();
}

void drawImage(int x, int y)
{
  int imageHeight = 32;
  int imageWidth = 64;
  int counter = 0;
  for (int yy = 0; yy < imageHeight; yy++)
  {
    for (int xx = 0; xx < imageWidth; xx++)
    {
      display.drawPixel(xx + x , yy + y, image[counter]);
      counter++;
    }
  }
}


void loop() {
  pixel_time_test(100);
    
}
